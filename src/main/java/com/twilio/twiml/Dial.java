/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml;

import com.twilio.http.HttpMethod;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@XmlRootElement(name = "Dial")
public class Dial extends TwiML {
    public enum Trim {
        TRIM_SILENCE("trim-silence"),
        DO_NOT_TRIM("do-not-trim");

        private final String value;

        private Trim(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI action;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod method;
    @XmlAttribute
    private final Integer timeout;
    @XmlAttribute
    private final Boolean hangupOnStar;
    @XmlAttribute
    private final Integer timeLimit;
    @XmlAttribute
    private final String callerId;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Trim record;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Trim trim;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI recordingStatusCallback;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod recordingStatusCallbackMethod;
    @XmlValue
    private final String number;
    @SuppressWarnings("checkstyle:indentation")
    @XmlElements({@XmlElement(name = "Client", type = Client.class), @XmlElement(name = "Conference", type = Conference.class), @XmlElement(name = "Number", type = Number.class), @XmlElement(name = "Queue", type = Queue.class), @XmlElement(name = "Sim", type = Sim.class), @XmlElement(name = "Sip", type = Sip.class)})
    private final List<TwiML> children;

    private Dial() {
        this(new Builder());
    }

    private Dial(Builder b) {
        super(b.options);
        this.action = b.action;
        this.method = b.method;
        this.timeout = b.timeout;
        this.hangupOnStar = b.hangupOnStar;
        this.timeLimit = b.timeLimit;
        this.callerId = b.callerId;
        this.record = b.record;
        this.trim = b.trim;
        this.recordingStatusCallback = b.recordingStatusCallback;
        this.recordingStatusCallbackMethod = b.recordingStatusCallbackMethod;
        this.number = b.number;
        this.children = b.children;
    }

    public URI getAction() {
        return action;
    }

    public HttpMethod getMethod() {
        return method;
    }

    public Integer getTimeout() {
        return timeout;
    }

    public Boolean isHangupOnStar() {
        return hangupOnStar;
    }

    public Integer getTimeLimit() {
        return timeLimit;
    }

    public String getCallerId() {
        return callerId;
    }

    public Trim getRecord() {
        return record;
    }

    public Trim getTrim() {
        return trim;
    }

    public URI getRecordingStatusCallback() {
        return recordingStatusCallback;
    }

    public HttpMethod getRecordingStatusCallbackMethod() {
        return recordingStatusCallbackMethod;
    }

    public String getNumber() {
        return number;
    }

    public List<TwiML> getChildren() {
        return children;
    }

    public static class Builder {
        private URI action;
        private HttpMethod method;
        private Integer timeout;
        private Boolean hangupOnStar;
        private Integer timeLimit;
        private String callerId;
        private Trim record;
        private Trim trim;
        private URI recordingStatusCallback;
        private HttpMethod recordingStatusCallbackMethod;
        private String number;
        private Map<String, String> options = new HashMap<>();
        private List<TwiML> children = new ArrayList<>();

        public Builder action(URI action) {
            this.action = action;
            return this;
        }

        public Builder method(HttpMethod method) {
            this.method = method;
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder hangupOnStar(Boolean hangupOnStar) {
            this.hangupOnStar = hangupOnStar;
            return this;
        }

        public Builder timeLimit(Integer timeLimit) {
            this.timeLimit = timeLimit;
            return this;
        }

        public Builder callerId(String callerId) {
            this.callerId = callerId;
            return this;
        }

        public Builder record(Trim record) {
            this.record = record;
            return this;
        }

        public Builder trim(Trim trim) {
            this.trim = trim;
            return this;
        }

        public Builder recordingStatusCallback(URI recordingStatusCallback) {
            this.recordingStatusCallback = recordingStatusCallback;
            return this;
        }

        public Builder recordingStatusCallbackMethod(HttpMethod recordingStatusCallbackMethod) {
            this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
            return this;
        }

        public Builder client(Client client) {
            this.children.add(client);
            return this;
        }

        public Builder conference(Conference conference) {
            this.children.add(conference);
            return this;
        }

        public Builder number(Number number) {
            this.children.add(number);
            return this;
        }

        public Builder queue(Queue queue) {
            this.children.add(queue);
            return this;
        }

        public Builder sim(Sim sim) {
            this.children.add(sim);
            return this;
        }

        public Builder sip(Sip sip) {
            this.children.add(sip);
            return this;
        }

        public Builder option(String key, String value) {
            this.options.put(key, value);
            return this;
        }

        public Dial build() {
            return new Dial(this);
        }
    }
}