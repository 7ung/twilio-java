/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@XmlRootElement(name = "Response")
public class VoiceResponse extends TwiML {
    @SuppressWarnings("checkstyle:indentation")
    @XmlElements({@XmlElement(name = "Dial", type = Dial.class), @XmlElement(name = "Echo", type = Echo.class), @XmlElement(name = "Enqueue", type = Enqueue.class), @XmlElement(name = "Gather", type = Gather.class), @XmlElement(name = "Hangup", type = Hangup.class), @XmlElement(name = "Leave", type = Leave.class), @XmlElement(name = "Pause", type = Pause.class), @XmlElement(name = "Play", type = Play.class), @XmlElement(name = "Queue", type = Queue.class), @XmlElement(name = "Record", type = Record.class), @XmlElement(name = "Redirect", type = Redirect.class), @XmlElement(name = "Reject", type = Reject.class), @XmlElement(name = "Say", type = Say.class), @XmlElement(name = "Sms", type = Sms.class)})
    private final List<TwiML> children;

    private VoiceResponse() {
        this(new Builder());
    }

    private VoiceResponse(Builder b) {
        super(b.options);
        this.children = b.children;
    }

    public List<TwiML> getChildren() {
        return children;
    }

    public static class Builder {
        private Map<String, String> options = new HashMap<>();
        private List<TwiML> children = new ArrayList<>();

        public Builder dial(Dial dial) {
            this.children.add(dial);
            return this;
        }

        public Builder echo(Echo echo) {
            this.children.add(echo);
            return this;
        }

        public Builder enqueue(Enqueue enqueue) {
            this.children.add(enqueue);
            return this;
        }

        public Builder gather(Gather gather) {
            this.children.add(gather);
            return this;
        }

        public Builder hangup(Hangup hangup) {
            this.children.add(hangup);
            return this;
        }

        public Builder leave(Leave leave) {
            this.children.add(leave);
            return this;
        }

        public Builder pause(Pause pause) {
            this.children.add(pause);
            return this;
        }

        public Builder play(Play play) {
            this.children.add(play);
            return this;
        }

        public Builder queue(Queue queue) {
            this.children.add(queue);
            return this;
        }

        public Builder record(Record record) {
            this.children.add(record);
            return this;
        }

        public Builder redirect(Redirect redirect) {
            this.children.add(redirect);
            return this;
        }

        public Builder reject(Reject reject) {
            this.children.add(reject);
            return this;
        }

        public Builder say(Say say) {
            this.children.add(say);
            return this;
        }

        public Builder sms(Sms sms) {
            this.children.add(sms);
            return this;
        }

        public Builder option(String key, String value) {
            this.options.put(key, value);
            return this;
        }

        public VoiceResponse build() {
            return new VoiceResponse(this);
        }
    }
}