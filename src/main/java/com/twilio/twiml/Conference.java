/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml;

import com.twilio.http.HttpMethod;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@XmlRootElement(name = "Conference")
public class Conference extends TwiML {
    public enum Beep {
        TRUE("true"),
        FALSE("false"),
        ONENTER("onEnter"),
        ONEXIT("onExit");

        private final String value;

        private Beep(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum Record {
        DO_NOT_RECORD("do-not-record"),
        RECORD_FROM_START("record-from-start");

        private final String value;

        private Record(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum Region {
        US1("us1"),
        IE1("ie1"),
        SG1("sg1"),
        BR1("br1"),
        AU1("au1"),
        JP1("jp1");

        private final String value;

        private Region(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum Event {
        START("start"),
        END("end"),
        JOIN("join"),
        LEAVE("leave"),
        MUTE("mute"),
        HOLD("hold"),
        SPEAKER("speaker");

        private final String value;

        private Event(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum Trim {
        TRIM_SILENCE("trim-silence"),
        DO_NOT_TRIM("do-not-trim");

        private final String value;

        private Trim(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    @XmlAttribute
    private final Boolean muted;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Beep beep;
    @XmlAttribute
    private final Boolean startConferenceOnEnter;
    @XmlAttribute
    private final Boolean endConferenceOnExit;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI waitUrl;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod waitMethod;
    @XmlAttribute
    private final Integer maxParticipants;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Record record;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Region region;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final String whisper;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Trim trim;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final List<Event> statusCallbackEvent;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI statusCallback;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod statusCallbackMethod;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI recordingStatusCallback;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod recordingStatusCallbackMethod;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI eventCallbackUrl;
    @XmlValue
    private final String name;

    private Conference() {
        this(new Builder(null));
    }

    private Conference(Builder b) {
        super(b.options);
        this.muted = b.muted;
        this.beep = b.beep;
        this.startConferenceOnEnter = b.startConferenceOnEnter;
        this.endConferenceOnExit = b.endConferenceOnExit;
        this.waitUrl = b.waitUrl;
        this.waitMethod = b.waitMethod;
        this.maxParticipants = b.maxParticipants;
        this.record = b.record;
        this.region = b.region;
        this.whisper = b.whisper;
        this.trim = b.trim;
        this.statusCallbackEvent = b.statusCallbackEvent;
        this.statusCallback = b.statusCallback;
        this.statusCallbackMethod = b.statusCallbackMethod;
        this.recordingStatusCallback = b.recordingStatusCallback;
        this.recordingStatusCallbackMethod = b.recordingStatusCallbackMethod;
        this.eventCallbackUrl = b.eventCallbackUrl;
        this.name = b.name;
    }

    public Boolean isMuted() {
        return muted;
    }

    public Beep getBeep() {
        return beep;
    }

    public Boolean isStartConferenceOnEnter() {
        return startConferenceOnEnter;
    }

    public Boolean isEndConferenceOnExit() {
        return endConferenceOnExit;
    }

    public URI getWaitUrl() {
        return waitUrl;
    }

    public HttpMethod getWaitMethod() {
        return waitMethod;
    }

    public Integer getMaxParticipants() {
        return maxParticipants;
    }

    public Record getRecord() {
        return record;
    }

    public Region getRegion() {
        return region;
    }

    public String getWhisper() {
        return whisper;
    }

    public Trim getTrim() {
        return trim;
    }

    public List<Event> getStatusCallbackEvent() {
        return statusCallbackEvent;
    }

    public URI getStatusCallback() {
        return statusCallback;
    }

    public HttpMethod getStatusCallbackMethod() {
        return statusCallbackMethod;
    }

    public URI getRecordingStatusCallback() {
        return recordingStatusCallback;
    }

    public HttpMethod getRecordingStatusCallbackMethod() {
        return recordingStatusCallbackMethod;
    }

    public URI getEventCallbackUrl() {
        return eventCallbackUrl;
    }

    public String getName() {
        return name;
    }

    public static class Builder {
        private Boolean muted;
        private Beep beep;
        private Boolean startConferenceOnEnter;
        private Boolean endConferenceOnExit;
        private URI waitUrl;
        private HttpMethod waitMethod;
        private Integer maxParticipants;
        private Record record;
        private Region region;
        private String whisper;
        private Trim trim;
        private List<Event> statusCallbackEvent;
        private URI statusCallback;
        private HttpMethod statusCallbackMethod;
        private URI recordingStatusCallback;
        private HttpMethod recordingStatusCallbackMethod;
        private URI eventCallbackUrl;
        private String name;
        private Map<String, String> options = new HashMap<>();

        public Builder(String name) {
            this.name = name;
        }

        public Builder muted(Boolean muted) {
            this.muted = muted;
            return this;
        }

        public Builder beep(Beep beep) {
            this.beep = beep;
            return this;
        }

        public Builder startConferenceOnEnter(Boolean startConferenceOnEnter) {
            this.startConferenceOnEnter = startConferenceOnEnter;
            return this;
        }

        public Builder endConferenceOnExit(Boolean endConferenceOnExit) {
            this.endConferenceOnExit = endConferenceOnExit;
            return this;
        }

        public Builder waitUrl(URI waitUrl) {
            this.waitUrl = waitUrl;
            return this;
        }

        public Builder waitMethod(HttpMethod waitMethod) {
            this.waitMethod = waitMethod;
            return this;
        }

        public Builder maxParticipants(Integer maxParticipants) {
            this.maxParticipants = maxParticipants;
            return this;
        }

        public Builder record(Record record) {
            this.record = record;
            return this;
        }

        public Builder region(Region region) {
            this.region = region;
            return this;
        }

        public Builder whisper(String whisper) {
            this.whisper = whisper;
            return this;
        }

        public Builder trim(Trim trim) {
            this.trim = trim;
            return this;
        }

        public Builder statusCallbackEvent(List<Event> statusCallbackEvent) {
            this.statusCallbackEvent = statusCallbackEvent;
            return this;
        }

        public Builder statusCallback(URI statusCallback) {
            this.statusCallback = statusCallback;
            return this;
        }

        public Builder statusCallbackMethod(HttpMethod statusCallbackMethod) {
            this.statusCallbackMethod = statusCallbackMethod;
            return this;
        }

        public Builder recordingStatusCallback(URI recordingStatusCallback) {
            this.recordingStatusCallback = recordingStatusCallback;
            return this;
        }

        public Builder recordingStatusCallbackMethod(HttpMethod recordingStatusCallbackMethod) {
            this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
            return this;
        }

        public Builder eventCallbackUrl(URI eventCallbackUrl) {
            this.eventCallbackUrl = eventCallbackUrl;
            return this;
        }

        public Builder option(String key, String value) {
            this.options.put(key, value);
            return this;
        }

        public Conference build() {
            return new Conference(this);
        }
    }
}