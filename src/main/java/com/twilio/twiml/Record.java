/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml;

import com.twilio.http.HttpMethod;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

@XmlRootElement(name = "Record")
public class Record extends TwiML {
    public enum Trim {
        TRIM_SILENCE("trim-silence"),
        DO_NOT_TRIM("do-not-trim");

        private final String value;

        private Trim(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI action;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod method;
    @XmlAttribute
    private final Integer timeout;
    @XmlAttribute
    private final String finishOnKey;
    @XmlAttribute
    private final Integer maxLength;
    @XmlAttribute
    private final Boolean playBeep;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Trim trim;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI recordingStatusCallback;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod recordingStatusCallbackMethod;
    @XmlAttribute
    private final Boolean transcribe;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI transcribeCallback;

    private Record() {
        this(new Builder());
    }

    private Record(Builder b) {
        super(b.options);
        this.action = b.action;
        this.method = b.method;
        this.timeout = b.timeout;
        this.finishOnKey = b.finishOnKey;
        this.maxLength = b.maxLength;
        this.playBeep = b.playBeep;
        this.trim = b.trim;
        this.recordingStatusCallback = b.recordingStatusCallback;
        this.recordingStatusCallbackMethod = b.recordingStatusCallbackMethod;
        this.transcribe = b.transcribe;
        this.transcribeCallback = b.transcribeCallback;
    }

    public URI getAction() {
        return action;
    }

    public HttpMethod getMethod() {
        return method;
    }

    public Integer getTimeout() {
        return timeout;
    }

    public String getFinishOnKey() {
        return finishOnKey;
    }

    public Integer getMaxLength() {
        return maxLength;
    }

    public Boolean isPlayBeep() {
        return playBeep;
    }

    public Trim getTrim() {
        return trim;
    }

    public URI getRecordingStatusCallback() {
        return recordingStatusCallback;
    }

    public HttpMethod getRecordingStatusCallbackMethod() {
        return recordingStatusCallbackMethod;
    }

    public Boolean isTranscribe() {
        return transcribe;
    }

    public URI getTranscribeCallback() {
        return transcribeCallback;
    }

    public static class Builder {
        private URI action;
        private HttpMethod method;
        private Integer timeout;
        private String finishOnKey;
        private Integer maxLength;
        private Boolean playBeep;
        private Trim trim;
        private URI recordingStatusCallback;
        private HttpMethod recordingStatusCallbackMethod;
        private Boolean transcribe;
        private URI transcribeCallback;
        private Map<String, String> options = new HashMap<>();

        public Builder action(URI action) {
            this.action = action;
            return this;
        }

        public Builder method(HttpMethod method) {
            this.method = method;
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder finishOnKey(String finishOnKey) {
            this.finishOnKey = finishOnKey;
            return this;
        }

        public Builder maxLength(Integer maxLength) {
            this.maxLength = maxLength;
            return this;
        }

        public Builder playBeep(Boolean playBeep) {
            this.playBeep = playBeep;
            return this;
        }

        public Builder trim(Trim trim) {
            this.trim = trim;
            return this;
        }

        public Builder recordingStatusCallback(URI recordingStatusCallback) {
            this.recordingStatusCallback = recordingStatusCallback;
            return this;
        }

        public Builder recordingStatusCallbackMethod(HttpMethod recordingStatusCallbackMethod) {
            this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
            return this;
        }

        public Builder transcribe(Boolean transcribe) {
            this.transcribe = transcribe;
            return this;
        }

        public Builder transcribeCallback(URI transcribeCallback) {
            this.transcribeCallback = transcribeCallback;
            return this;
        }

        public Builder option(String key, String value) {
            this.options.put(key, value);
            return this;
        }

        public Record build() {
            return new Record(this);
        }
    }
}