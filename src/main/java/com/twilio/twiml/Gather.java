/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.twiml;

import com.twilio.http.HttpMethod;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@XmlRootElement(name = "Gather")
public class Gather extends TwiML {
    public enum Input {
        DTMF("dtmf"),
        SPEECH("speech"),
        DTMF SPEECH("dtmf speech");

        private final String value;

        private Input(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    public enum Language {
        AF_ZA("af-ZA"),
        ID_ID("id-ID"),
        MS_MY("ms-MY"),
        CA_ES("ca-ES"),
        CS_CZ("cs-CZ"),
        DA_DK("da-DK"),
        DE_DE("de-DE"),
        EN_AU("en-AU"),
        EN_CA("en-CA"),
        EN_GB("en-GB"),
        EN_IN("en-IN"),
        EN_IE("en-IE"),
        EN_NZ("en-NZ"),
        EN_PH("en-PH"),
        EN_ZA("en-ZA"),
        EN_US("en-US"),
        ES_AR("es-AR"),
        ES_BO("es-BO"),
        ES_CL("es-CL"),
        ES_CO("es-CO"),
        ES_CR("es-CR"),
        ES_EC("es-EC"),
        ES_SV("es-SV"),
        ES_ES("es-ES"),
        ES_US("es-US"),
        ES_GT("es-GT"),
        ES_HN("es-HN"),
        ES_MX("es-MX"),
        ES_NI("es-NI"),
        ES_PA("es-PA"),
        ES_PY("es-PY"),
        ES_PE("es-PE"),
        ES_PR("es-PR"),
        ES_DO("es-DO"),
        ES_UY("es-UY"),
        ES_VE("es-VE"),
        EU_ES("eu-ES"),
        IL_PH("il-PH"),
        FR_CA("fr-CA"),
        FR_FR("fr-FR"),
        GL_ES("gl-ES"),
        HR_HR("hr-HR"),
        ZU_ZA("zu-ZA"),
        IS_IS("is-IS"),
        IT_IT("it-IT"),
        LT_LT("lt-LT"),
        HU_HU("hu-HU"),
        NL_NL("nl-NL"),
        NB_NO("nb-NO"),
        PL_PL("pl-PL"),
        PT_BR("pt-BR"),
        PT_PT("pt-PT"),
        RO_RO("ro-RO"),
        SK_SK("sk-SK"),
        SL_SI("sl-SI"),
        FI_FI("fi-FI"),
        SV_SE("sv-SE"),
        VI_VN("vi-VN"),
        TR_TR("tr-TR"),
        EL_GR("el-GR"),
        BG_BG("bg-BG"),
        RU_RU("ru-RU"),
        SR_RS("sr-RS"),
        UK_UA("uk-UA"),
        HE_IL("he-IL"),
        AR_IL("ar-IL"),
        AR_JO("ar-JO"),
        AR_AE("ar-AE"),
        AR_BH("ar-BH"),
        AR_DZ("ar-DZ"),
        AR_SA("ar-SA"),
        AR_IQ("ar-IQ"),
        AR_KW("ar-KW"),
        AR_MA("ar-MA"),
        AR_TN("ar-TN"),
        AR_OM("ar-OM"),
        AR_PS("ar-PS"),
        AR_QA("ar-QA"),
        AR_LB("ar-LB"),
        AR_EG("ar-EG"),
        FA_IR("fa-IR"),
        HI_IN("hi-IN"),
        TH_TH("th-TH"),
        KO_KR("ko-KR"),
        CMN_HANT_TW("cmn-Hant-TW"),
        YUE_HANT_HK("yue-Hant-HK"),
        JA_JP("ja-JP"),
        CMN_HANS_HK("cmn-Hans-HK"),
        CMN_HANS_CN("cmn-Hans-CN");

        private final String value;

        private Language(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }
    }

    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Input input;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI action;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod method;
    @XmlAttribute
    private final Integer timeout;
    @XmlAttribute
    private final String finishOnKey;
    @XmlAttribute
    private final Integer numDigits;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final URI partialResultCallback;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final HttpMethod partialResultCallbackMethod;
    @XmlAttribute
    @XmlJavaTypeAdapter(TwiML.ToStringAdapter.class)
    private final Language language;
    @XmlAttribute
    private final String hints;
    @XmlAttribute
    private final Boolean bargeIn;
    @SuppressWarnings("checkstyle:indentation")
    @XmlElements({@XmlElement(name = "Say", type = Say.class), @XmlElement(name = "Pause", type = Pause.class), @XmlElement(name = "Play", type = Play.class)})
    private final List<TwiML> children;

    private Gather() {
        this(new Builder());
    }

    private Gather(Builder b) {
        super(b.options);
        this.input = b.input;
        this.action = b.action;
        this.method = b.method;
        this.timeout = b.timeout;
        this.finishOnKey = b.finishOnKey;
        this.numDigits = b.numDigits;
        this.partialResultCallback = b.partialResultCallback;
        this.partialResultCallbackMethod = b.partialResultCallbackMethod;
        this.language = b.language;
        this.hints = b.hints;
        this.bargeIn = b.bargeIn;
        this.children = b.children;
    }

    public Input getInput() {
        return input;
    }

    public URI getAction() {
        return action;
    }

    public HttpMethod getMethod() {
        return method;
    }

    public Integer getTimeout() {
        return timeout;
    }

    public String getFinishOnKey() {
        return finishOnKey;
    }

    public Integer getNumDigits() {
        return numDigits;
    }

    public URI getPartialResultCallback() {
        return partialResultCallback;
    }

    public HttpMethod getPartialResultCallbackMethod() {
        return partialResultCallbackMethod;
    }

    public Language getLanguage() {
        return language;
    }

    public String getHints() {
        return hints;
    }

    public Boolean isBargeIn() {
        return bargeIn;
    }

    public List<TwiML> getChildren() {
        return children;
    }

    public static class Builder {
        private Input input;
        private URI action;
        private HttpMethod method;
        private Integer timeout;
        private String finishOnKey;
        private Integer numDigits;
        private URI partialResultCallback;
        private HttpMethod partialResultCallbackMethod;
        private Language language;
        private String hints;
        private Boolean bargeIn;
        private Map<String, String> options = new HashMap<>();
        private List<TwiML> children = new ArrayList<>();

        public Builder input(Input input) {
            this.input = input;
            return this;
        }

        public Builder action(URI action) {
            this.action = action;
            return this;
        }

        public Builder method(HttpMethod method) {
            this.method = method;
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder finishOnKey(String finishOnKey) {
            this.finishOnKey = finishOnKey;
            return this;
        }

        public Builder numDigits(Integer numDigits) {
            this.numDigits = numDigits;
            return this;
        }

        public Builder partialResultCallback(URI partialResultCallback) {
            this.partialResultCallback = partialResultCallback;
            return this;
        }

        public Builder partialResultCallbackMethod(HttpMethod partialResultCallbackMethod) {
            this.partialResultCallbackMethod = partialResultCallbackMethod;
            return this;
        }

        public Builder language(Language language) {
            this.language = language;
            return this;
        }

        public Builder hints(String hints) {
            this.hints = hints;
            return this;
        }

        public Builder bargeIn(Boolean bargeIn) {
            this.bargeIn = bargeIn;
            return this;
        }

        public Builder say(Say say) {
            this.children.add(say);
            return this;
        }

        public Builder pause(Pause pause) {
            this.children.add(pause);
            return this;
        }

        public Builder play(Play play) {
            this.children.add(play);
            return this;
        }

        public Builder option(String key, String value) {
            this.options.put(key, value);
            return this;
        }

        public Gather build() {
            return new Gather(this);
        }
    }
}